var google_docs_url_root = 'https://docs.google.com/spreadsheet/pub?key=',
  config_csv_url = '&single=true&gid=1&range=B1%3AD100&output=csv',
  data_csv_url = '&single=true&gid=2&range=A1%3AT500&output=csv',
  data_webpage_url = '&single=true&gid=2&range=A2%3AL300&output=html',
  sheet_url,
  font_name,
  font_weight,
  offline_mode,
  stage_size = [],
  dimensions_obj = {},
  device_type,
  config_JSON_arr,
  data_JSON_arr,
  PJS_instance,
  facet_ids = {},
  enabled_value = 'Yes',
  disabled_value = 'No',
  processing_notification_text,
  datapoints_arr = [],
  minimum_radius,
  maximum_radius,
  shuffle_duration_limit,
  instruction_text = 'Roll over a bubble for more detail.',
  scale_obj,
  scaleLabels_arr = [],
  dividinglines_arr = [],
  horizontal_buffer_amount = 40,
  vertical_buffer_amount = 30,
  scale_font_size = 11,
  filter_categories_arr = [],
  filter_types_arr = [],
  bubble_size_params_arr = [],
  show_filter_button,
  context = '',
  axis_context,
  bubble_colours_arr = [],
  bubble_linear_gradient,
  bubble_one_to_watch_fill,
  preset_gradient_set,
  gradient_set_direction,
  type_colours_arr,
  bubble_colours_params_arr = [],
  colour_bubbles_by,
  reordering_params_arr = [],
  type_colour_palettes = [
    {
      id: 'Grayscale',
      colours_arr: 'f2f2f2 e6e6e6 cccccc b3b3b3 999999 808080 666666 4d4d4d 333333'.split(
        ' '
      )
    },
    {
      id: 'Pale',
      colours_arr: 'f6d1db f6d0c3 d2bc77 dcb2b2 bed6c6 cd6661 cccccc fde5d1 b4e3f5'.split(
        ' '
      )
    },
    {
      id: 'Pastel',
      colours_arr: '3d2c26 7b4922 ac806d b0a095 84907c 7ba0a5 e48244 e5e3ca e9b36e'.split(
        ' '
      )
    },
    {
      id: 'Warm',
      colours_arr: 'e99589 e06352 d60f1f b8442b 633518 9d7950 c0a88b e2d7c7 f1e8d6'.split(
        ' '
      )
    },
    {
      id: 'Fresh',
      colours_arr: 'cc78a7 b03e4d 977da9 bcb471 97c02e 41abdf c89d6a 836258 7b4d27'.split(
        ' '
      )
    },
    {
      id: 'Strong',
      colours_arr: 'cfd5e9 662546 39317f 266eb3 c0ad3a b62b7a e54b25 e5c6a4 b9522c'.split(
        ' '
      )
    }
  ],
  user_defined_palette,
  functionality_obj = {
    app_status: 'LOADING'
  },
  active_data_point,
  mouse_y,
  bubble_size_param_name,
  mousetrap_obj = {};
$(document).ready(function() {
  getQueryStringVars();
  setNotifications('LOADING');
  setupDisclaimer();
  getCanvasReference();
  data_webpage_url = google_docs_url_root + sheet_url + data_webpage_url;
  dbg('offline mode : ' + offline_mode);
  if (offline_mode) {
    device_type = 'is_desktop';
    checkPJSLoad();
    var a = document.createElement('style');
    a.appendChild(
      document.createTextNode(
        "\t\t@font-face {\t\tfont-family: '" +
          font_name +
          "';\t\tsrc: local('\u263a'), url('user-editable/" +
          font_name +
          '-' +
          font_weight +
          ".ttf');\t\t}\t\t"
      )
    );
    document.head.appendChild(a);
    $('body').css('font-family', font_name + ', "Dosis"');
  } else {
    WebFontConfig = {
      google: {
        families: [
          font_name + ':' + font_weight + ':latin',
          'Dosis:Medium:latin'
        ]
      }
    };
    a = document.createElement('script');
    a.src =
      ('https:' == document.location.protocol ? 'https' : 'http') +
      '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
    a.type = 'text/javascript';
    a.async = 'true';
    var b = document.getElementsByTagName('script')[0];
    b.parentNode.insertBefore(a, b);
    $('body,html').css('font-family', font_name + ", 'Dosis'");
    getDevice();
  }
});
function getQueryStringVars() {
  sheet_url = getParameterByName('sheet_url');
  font_name = getParameterByName('font_name');
  font_weight = getParameterByName('font_weight');
  dimensions_obj.desktop = [
    parseInt(getParameterByName('desktop_width')),
    parseInt(getParameterByName('desktop_height'))
  ];
  dimensions_obj.tablet = [
    parseInt(getParameterByName('tablet_width')),
    parseInt(getParameterByName('tablet_height'))
  ];
  dimensions_obj.mobile = [
    parseInt(getParameterByName('mobile_width')),
    parseInt(getParameterByName('mobile_height'))
  ];
  isNaN(dimensions_obj.tablet[0]) && (dimensions_obj.tablet = [940, 1400]);
  isNaN(dimensions_obj.mobile[0]) && (dimensions_obj.mobile = [640, 1500]);
  offline_mode = 'true' == getParameterByName('offline_mode') ? !0 : !1;
}
function getDevice() {
  // "true" != offline_mode && $.get("p/Mobile_Detect.php", deviceDetected)
  deviceDetected('is_desktop');
}
function deviceDetected(a) {
  device_type = a;
  dbg('detected device : ' + device_type);
  null != config_JSON_arr ? checkPJSLoad() : loadConfigJSONOnline();
}
function dbg(a) {
  window.console && console.log(a);
}
function setNotifications(a) {
  'LOADING' == a
    ? ($('#nojs-notification').css('display', 'none'),
      $('#loading-notification').css('display', 'block'))
    : 'NOJS' == a
      ? ($('#notifications-container').css('display', 'block'),
        $('#nojs-notification').css('display', 'block'),
        $('#loading-notification').css('display', 'none'))
      : 'NONE' == a && $('#notifications-container').css('display', 'none');
}
function setupDisclaimer() {
  $('#close-disclaimer-button').click(closeDisclaimer);
}
function closeDisclaimer() {
  $('#info-popup').css('display', 'none');
  functionality_obj.app_status = 'SHOWING_VIZ';
  PJS_instance.chooseBubbleSizeParam(bubble_size_params_arr[0].id);
  var a = $('#instruction-popup');
  $('#instruction-popup p').text(instruction_text);
  a.css({
    opacity: 0,
    display: 'block'
  });
  TweenLite.to(a, 1, {
    css: {
      opacity: 1
    },
    delay: 2,
    onComplete: function() {
      TweenLite.to(a, 0.5, {
        css: {
          opacity: 0
        },
        delay: 3
      });
    }
  });
  var b = $('#viz-filter-panel');
  TweenLite.to(b, 1, {
    css: {
      opacity: 1
    },
    delay: 3
  });
  b = $('#header-ui');
  TweenLite.to(b, 1, {
    css: {
      opacity: 1
    },
    delay: 0.5
  });
  b = $('#viz-footer');
  b.css('display', 'block');
  TweenLite.to(b, 1, {
    css: {
      opacity: 1
    },
    delay: 2
  });
  drawScaleLabels();
  showHighlightKey();
  TweenLite.to($('#viz-key'), 1, {
    css: {
      //opacity: 1
    },
    delay: 1.5
  });
  $('#pjs-canvas-container').css('opacity', 1);
}

function loadJSON(callback) {
  var a = '../../../assets/data/config.json';
  var xobj = new XMLHttpRequest();
  xobj.overrideMimeType('application/json');
  xobj.open('GET', a, true); // Replace 'my_data' with the path to your file
  xobj.onreadystatechange = function() {
    if (xobj.readyState == 4 && xobj.status == '200') {
      // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
      callback(xobj.responseText);
    }
  };
  xobj.send(null);
}

function loadConfigJSONOnline() {
  var a = '../../../assets/data/config.json';

  // a = "p/load_viz_data.php?google_docs_url_root=" + encodeURIComponent(google_docs_url_root);
  // a += "&sheet_id=" + sheet_url;
  // a += "&cells=" + encodeURIComponent(config_csv_url);
  // a += "&referringdomain=" + document.referrer;

  //$.getJSON(a, "", onConfigJSONLoaded)
  $.getJSON(a, function(data) {
    onConfigJSONLoaded(data);
  }).fail(function(e) {
    console.log('error', e);
  });
}
function onConfigJSONLoaded(a) {
  config_JSON_arr = a;
  config_JSON_arr.error
    ? $('#loading-notification').text(
        'This visualisation is not authorised. Please contact XXX'
      )
    : loadDataJSONOnline();
}
function loadDataJSONOnline() {
  var a = '../../../assets/data/data.json';
  // a = encodeURIComponent(google_docs_url_root); // encodeURIComponent appends path to URL
  // a += "&sheet_id=" + sheet_url;
  // a += "&cells=" + encodeURIComponent(data_csv_url);
  //a += "&referringdomain=" + document.referrer;
  //$.get(a, onJSONDataLoaded);

  $.get(a, function(data) {
    //console.log( "success",data );
    onJSONDataLoaded(data);
  }).fail(function(e) {
    console.log('error', e);
  });
}
function onJSONDataLoaded(a) {
  dbg(' viz data loaded');
  data_JSON_arr = a;
  checkPJSLoad();
}
function checkPJSLoad() {
  function a() {
    dbg('checking for PJS instance');
    PJS_instance = Processing.getInstanceById('pjs_instance');
    null == PJS_instance
      ? setTimeout(a, 250)
      : (dbg('found : ' + PJS_instance),
        passConfigDataToPSJInstance(),
        passJSONDataToPJSInstance());
  }
  a();
}
function setDimensions() {
  var a = $(window).width(),
    b = $('#balloon-race-visualisation-container'),
    c = $('#viz-header');
  $('#viz-header-inner');
  var d = $('#info-popup'),
    e = $('#popups-container'),
    f = $('#pjs-canvas-container'),
    g = $('#viz-filter-panel');
  'is_mobile' == device_type
    ? (dbg('assuming mobile'),
      (width = dimensions_obj.mobile[0]),
      (height = dimensions_obj.mobile[1]),
      b.css('margin', '0 50px 0 50px'),
      g.width(120),
      g.css('margin-top', '10px'),
      e.css('margin-top', '10px'),
      $('.footer-logo').css('width', '100%'),
      $('.footer-logo').css('text-align', 'center'),
      d.css('margin-top', 40),
      (shuffle_duration_limit = 400))
    : 'is_tablet' == device_type
      ? (dbg('assuming tablet'),
        (width = dimensions_obj.tablet[0]),
        (height = dimensions_obj.tablet[1]),
        b.css('margin', '0 50px 0 50px'),
        e.css('margin-top', '10px'),
        $('#bubble-colour-label p').text('COLOUR'),
        $('.footer-logo').css('width', '100%'),
        $('.footer-logo').css('text-align', 'center'),
        (shuffle_duration_limit = 400))
      : (dbg('assuming desktop'),
        (width = Math.min(dimensions_obj.desktop[0], a - 1)),
        (height = dimensions_obj.desktop[1]),
        dbg('checking width : ' + dimensions_obj.desktop[0] + ' / ' + a),
        800 > width &&
          ($('.footer-logo').css('width', 'auto'),
          $('#informationisbeautiful-logo').css('text-align', 'left'),
          $('#vizengine-logo').css('text-align', 'right'),
          $('#vizengine-logo').css('float', 'right'),
          $('#client-logo').css('width', '100%'),
          $('#client-logo').css('text-align', 'center'),
          $('#bubble-size-label p').text('SIZE'),
          $('#bubble-colour-label p').text('COLOUR')),
        (shuffle_duration_limit = 600));
  f.css('margin', '0 0 0 0');
  stage_size = [parseInt(width), parseInt(height)];
  a = $('#mousetrap');
  a.css('width', 100 + parseInt(stage_size[0]) + 'px');
  a.css('height', stage_size[1] + 'px');
  a = stage_size[0];
  PJS_instance.setStageSize(parseInt(width) + 100, height);
  b.css('width', a + 'px');
  d.css('width', a);
  d.css('height', stage_size[1]);
  c.css('width', a);
  $('#header-title-container').width(stage_size[0] - 150);
  $('#viz-key').width(stage_size[0] - (stage_size[0] - 150));
  $('#viz-footer').css('width', a);
}
function passConfigDataToPSJInstance() {
  dbg('passing config data');
  var a;
  setDimensions();
  for (var b = 0; b < config_JSON_arr.length; b++)
    switch (((a = config_JSON_arr[b]), a.name)) {
      case 'bubblesizes':
        minimum_radius = a.firstvalue;
        maximum_radius = a.secondvalue;
        break;
      case 'scale_font_size':
        scale_font_size = a.firstvalue;
        break;
      case 'scale':
        scale_obj = new Scale(a.firstvalue, a.secondvalue);
        break;
      case 'label':
        a = new ScaleLabel(a.firstvalue, a.secondvalue);
        scaleLabels_arr.push(a);
        break;
      case 'line':
        var c = '',
          d = '',
          e = a.firstvalue;
        '' != a.secondvalue &&
          (-1 == a.secondvalue.indexOf(',')
            ? (c = a.secondvalue)
            : ((a = String(a.secondvalue).split(',')),
              (c = a[0]),
              (d = trimTrailingSpaces(a[1]))));
        '' != e &&
          '' != c &&
          ((a = new PJS_instance.DividingLine(e, c, d)),
          a.getPosition(),
          dividinglines_arr.push(a));
        break;
      case 'entitycolourset':
        a = a.firstvalue;
        for (c = 0; c < type_colour_palettes.length; c++)
          a == type_colour_palettes[c].id &&
            (type_colours_arr = type_colour_palettes[c].colours_arr);
        break;
      case 'typecolour':
        a.firstvalue &&
          (user_defined_palette || (user_defined_palette = []),
          user_defined_palette &&
            user_defined_palette.push({
              id: a.firstvalue,
              bubble_colour: a.secondvalue
            }));
        break;
      case 'gradientcolourset':
        'None' != a.firstvalue &&
          ((preset_gradient_set = a.firstvalue),
          (gradient_set_direction = a.secondvalue));
        break;
      case 'gradientcolour':
        null == preset_gradient_set &&
          bubble_colours_arr.push({
            position: a.firstvalue,
            colour: a.secondvalue
          });
        break;
      case 'onetowatchcolour':
        switch (a.firstvalue) {
          case 'Only when colouring by Primary Value':
            functionality_obj.onetowatch = 'primary_value_only';
            break;
          case 'Only when colouring by Type':
            functionality_obj.onetowatch = 'type_only';
            break;
          case 'Always':
            functionality_obj.onetowatch = 'always';
            break;
          case 'Never':
            functionality_obj.onetowatch = 'never';
        }
        bubble_one_to_watch_fill = '#' + a.secondvalue;
        $('#one-to-watch-circle').css(
          'background-color',
          bubble_one_to_watch_fill
        );
        $('#one-to-watch-key-label').text(data_JSON_arr[0].highlight);
        break;
      case 'func_colour_by_type':
        switch (a.firstvalue) {
          case 'Colour by Primary Value only':
            colour_bubbles_by = 'value';
            bubble_colours_params_arr = [
              {
                id: 'value',
                label: data_JSON_arr[0].primaryvalue,
                checked: !0
              }
            ];
            break;
          case 'Colour by Type only':
            colour_bubbles_by = 'type';
            bubble_colours_params_arr = [
              {
                id: 'type',
                label: data_JSON_arr[0].type,
                checked: !0
              }
            ];
            break;
          case 'Both (default to Primary Value)':
            bubble_colours_params_arr = [
              {
                id: 'value',
                label: data_JSON_arr[0].primaryvalue,
                checked: !0
              },
              {
                id: 'type',
                label: data_JSON_arr[0].type,
                checked: !1
              }
            ];
            colour_bubbles_by = 'value';
            break;
          case 'Both (default to Type)':
            (bubble_colours_params_arr = [
              {
                id: 'value',
                label: data_JSON_arr[0].primaryvalue,
                checked: !1
              },
              {
                id: 'type',
                label: data_JSON_arr[0].type,
                checked: !0
              }
            ]),
              (colour_bubbles_by = 'type');
        }
        break;
      case 'func_allow_reordering':
        a.firstvalue == enabled_value
          ? (reordering_params_arr = [
              {
                id: 'name',
                type: 'string',
                direction: 'ascending',
                checked: !0
              }
            ])
          : ($('#footer-ui').css('display', 'none'),
            $('#footer-filter-ui-divider').css('display', 'none'));
        break;
      case 'func_filter_metric_001':
        checked = 0 == bubble_size_params_arr.length ? !0 : !1;
        a.firstvalue == enabled_value &&
          bubble_size_params_arr.push({
            id: 'metric_001',
            checked: checked
          });
        break;
      case 'func_filter_metric_002':
        checked = 0 == bubble_size_params_arr.length ? !0 : !1;
        a.firstvalue == enabled_value &&
          bubble_size_params_arr.push({
            id: 'metric_002',
            checked: checked
          });
        break;
      case 'func_filter_metric_003':
        checked = 0 == bubble_size_params_arr.length ? !0 : !1;
        a.firstvalue == enabled_value &&
          bubble_size_params_arr.push({
            id: 'metric_003',
            checked: checked
          });
        break;
      case 'func_filter_metric_004':
        checked = 0 == bubble_size_params_arr.length ? !0 : !1;
        a.firstvalue == enabled_value &&
          bubble_size_params_arr.push({
            id: 'metric_004',
            checked: checked
          });
        break;
      case 'func_xaxis_metric_001':
        dbg(
          'checking : func_xaxis_metric_001 ' + isMetricEnabled('metric_001')
        );
        a.firstvalue == enabled_value &&
          reordering_params_arr.push({
            id: 'metric_001',
            checked: !1,
            type: 'number',
            direction: 'ascending'
          });
        break;
      case 'func_xaxis_metric_002':
        a.firstvalue == enabled_value &&
          reordering_params_arr.push({
            id: 'metric_002',
            checked: !1,
            type: 'number',
            direction: 'ascending'
          });
        break;
      case 'func_xaxis_metric_003':
        a.firstvalue == enabled_value &&
          reordering_params_arr.push({
            id: 'metric_003',
            checked: !1,
            type: 'number',
            direction: 'ascending'
          });
        break;
      case 'func_xaxis_metric_004':
        a.firstvalue == enabled_value &&
          reordering_params_arr.push({
            id: 'metric_004',
            checked: !1,
            type: 'number',
            direction: 'ascending'
          });
        break;
      case 'func_notes':
        a.firstvalue == enabled_value && (functionality_obj.show_notes = !0);
        break;
      case 'shownoteslabel':
        functionality_obj.shownotes_label = a.firstvalue;
        break;
      case 'opensourcelabel':
        functionality_obj.opensource_label = a.firstvalue;
        break;
      case 'title':
        c = $('#main-title');
        c.text(a.firstvalue);
        c.css('font-size', a.secondvalue + 'px');
        break;
      case 'primarysubtitle':
        c = $('#primary-sub-title');
        c.css('font-size', a.secondvalue + 'px');
        '' != a.firstvalue ? c.text(a.firstvalue) : c.html('&nbsp');
        break;
      case 'secondarysubtitle':
        c = $('#secondary-sub-title');
        c.css('font-size', a.secondvalue + 'px');
        '' != a.firstvalue ? c.text(a.firstvalue) : c.html('&nbsp');
        break;
      case 'processingnotification':
        processing_notification_text = a.firstvalue;
        break;
      case 'disclaimer':
        '' != a.secondvalue
          ? ((c = $('#info-popup')),
            $('#info-popup-title').text(a.firstvalue),
            c.css('display', 'block'),
            (a = a.secondvalue),
            $('#info-popup-content').html(a))
          : setTimeout(closeDisclaimer, 1500);
        break;
      case 'instruction_text':
        instruction_text = a.firstvalue;
        break;
      case 'credits':
        console.log('credits', a);
        $('#viz-credits-container').html(a.firstvalue);
        break;
      case 'source':
        a = a.firstvalue;
        a = a.replace(/\n/g, '<br>');
        $('#data-source-container').html(a);
        break;
      case 'seethedatalink':
        '' != a.firstvalue
          ? $('#see-the-data-button a').attr('href', a.firstvalue)
          : $('#see-the-data-button').css('display', 'none');
        break;
      case 'sendfeedbacklink':
        $('#send-feedback-button a')
          .attr('href', a.firstvalue)
          .css('visibility', 'visible');
        break;
      case 'footerlogo_001':
        a.firstvalue &&
          ((c = $('#footer-logo-001')),
          c.css('visibility', 'visible'),
          c.find('img').attr('src', a.firstvalue),
          a.secondvalue && c.children('a').attr('href', a.secondvalue));
        break;
      case 'footerlogo_002':
        a.firstvalue &&
          ((c = $('#footer-logo-002')),
          c.css('visibility', 'visible'),
          c.find('img').attr('src', a.firstvalue),
          a.secondvalue && c.children('a').attr('href', a.secondvalue));
        break;
      case 'footerlogo_003':
        a.firstvalue &&
          ((c = $('#footer-logo-003')),
          c.css('visibility', 'visible'),
          c.find('img').attr('src', a.firstvalue),
          a.secondvalue && c.children('a').attr('href', a.secondvalue));
    }
  makeBackgroundGradient();
}
function isMetricEnabled(a) {
  for (var b = 0; b < bubble_size_params_arr.length; b++)
    if (bubble_size_params_arr[b].id == a) return !0;
  return !1;
}
function passJSONDataToPJSInstance() {
  dbg('passing viz data');
  var a, b, c, d, e, f;
  extractFacetNames();
  for (var g = 0; g < data_JSON_arr.length; g++)
    (a = data_JSON_arr[g]),
      '' == a.exclude &&
        ((a.metric_001 = '' != a.metric_001 ? parseFloat(a.metric_001) : 0),
        (a.metric_002 = '' != a.metric_002 ? parseFloat(a.metric_002) : 0),
        (a.metric_003 = '' != a.metric_003 ? parseFloat(a.metric_003) : 0),
        (a.metric_004 = '' != a.metric_004 ? parseFloat(a.metric_004) : 0));
  checkMetricContent('001');
  checkMetricContent('002');
  checkMetricContent('003');
  checkMetricContent('004');
  for (g = 0; g < data_JSON_arr.length; g++)
    (a = data_JSON_arr[g]),
      '' == a.exclude &&
        ((b = splitStringToArrayAndTrimSpaces(a.subcategory)),
        (c = splitStringToArrayAndTrimSpaces(a.category)),
        (d = splitStringToArrayAndTrimSpaces(a.type)),
        '' != a.thirdsource
          ? (f = a.thirdsource)
          : '' != a.secondsource
            ? (f = a.secondsource)
            : '' != a.firstsource && (f = a.firstsource),
        (e = functionality_obj.onetowatch ? a.highlight : !1),
        (b = new PJS_instance.DataPoint(
          a.name,
          a.alternativename,
          a.primaryvalue,
          b,
          c,
          d,
          e,
          a.metric_001,
          a.metric_002,
          a.metric_003,
          a.metric_004,
          a.notes,
          a.exclude,
          f,
          g
        )),
        b.getInitialPosition(),
        (b.current_radius = 1),
        datapoints_arr.push(b),
        addUnparsedItemToArray(filter_categories_arr, a.category),
        addUnparsedItemToArray(filter_types_arr, a.type));
  datapoints_arr = sortArrayBy(
    datapoints_arr,
    '_name',
    'string',
    'ascending',
    !0
  );
  buildFilterPanel();
  setNotifications('NONE');
  PJS_instance.allDataPointsAdded();
  setMouseInteractions();
}
function checkMetricContent(a) {
  for (var b, c = !1, d = 0; d < data_JSON_arr.length; d++)
    (b = data_JSON_arr[d]),
      '' == b.exclude && 0 != b['metric_' + a] && (c = !0);
  if (!c) {
    for (d = 0; d < bubble_size_params_arr.length; d++)
      bubble_size_params_arr[d].id == 'metric_' + a &&
        bubble_size_params_arr.splice(d, 1);
    for (d = 0; d < reordering_params_arr.length; d++)
      reordering_params_arr[d].id == 'metric_' + a &&
        reordering_params_arr.splice(d, 1);
  }
}
function extractFacetNames() {
  var a = data_JSON_arr[0].primaryvalue;
  $('#header-scale-label p').text(a);
  var a = data_JSON_arr[0].category,
    b = data_JSON_arr[0].type;
  $('#category-filters-container p').text(a);
  $('#type-filters-container p').text(b);
  a = [
    data_JSON_arr[0].metric_001,
    data_JSON_arr[0].metric_002,
    data_JSON_arr[0].metric_003,
    data_JSON_arr[0].metric_004
  ];
  for (b = 0; b < a.length; b++) {
    var c = b + 1;
    $('#metric_00' + c + '-filter-button p').text(a[b]);
    $('#metric_00' + c + '-ordering-button p').text(a[b]);
  }
}
function getCanvasReference() {
  var a = document.getElementById('pjs_instance');
  a.getContext ? (context = a.getContext('2d')) : setNotifications('NOHTML5');
}
function makeBackgroundGradient() {
  if (null != preset_gradient_set) {
    var a,
      b = scale_obj._minimum + (scale_obj._maximum - scale_obj._minimum) / 2,
      c;
    'Top to Bottom' == gradient_set_direction
      ? ((a = scale_obj._maximum), (c = scale_obj._minimum))
      : ((a = scale_obj._minimum), (c = scale_obj._maximum));
    switch (preset_gradient_set) {
      case 'blue > green > yellow':
        bubble_colours_arr = [
          {
            position: a,
            colour: '433f92'
          },
          {
            position: b,
            colour: '47b25b'
          },
          {
            position: c,
            colour: 'fff9d1'
          }
        ];
        break;
      case 'red > orange > blue':
        bubble_colours_arr = [
          {
            position: a,
            colour: 'FF3333'
          },
          {
            position: b,
            colour: 'FF9933'
          },
          {
            position: c,
            colour: '336699'
          }
        ];
        break;
      case 'green > yellow > orange':
        bubble_colours_arr = [
          {
            position: a,
            colour: '00A24B'
          },
          {
            position: b,
            colour: 'FFDE17'
          },
          {
            position: c,
            colour: 'F26522'
          }
        ];
        break;
      case 'clay':
        bubble_colours_arr = [
          {
            position: a,
            colour: 'ffde17'
          },
          {
            position: b,
            colour: 'f28888'
          },
          {
            position: c,
            colour: 'a84927'
          }
        ];
        break;
      case 'chrome':
        bubble_colours_arr = [
          {
            position: a,
            colour: 'eeeeee'
          },
          {
            position: b,
            colour: '8a9498'
          },
          {
            position: c,
            colour: '496a7e'
          }
        ];
        break;
      case 'khaki':
        bubble_colours_arr = [
          {
            position: a,
            colour: '00653a'
          },
          {
            position: b,
            colour: '8f9037'
          },
          {
            position: c,
            colour: 'eeeeee'
          }
        ];
        break;
      case 'skylight':
        bubble_colours_arr = [
          {
            position: a,
            colour: '78bdc7'
          },
          {
            position: b,
            colour: '9dc7ea'
          },
          {
            position: c,
            colour: 'ffeab7'
          }
        ];
        break;
      case 'yellow > blue':
        bubble_colours_arr = [
          {
            position: a,
            colour: '0080c8'
          },
          {
            position: b,
            colour: 'fff200'
          },
          {
            position: c,
            colour: 'fcf3a9'
          }
        ];
        break;
      case 'yellow > purple':
        bubble_colours_arr = [
          {
            position: a,
            colour: '552f7f'
          },
          {
            position: c,
            colour: 'ffd800'
          }
        ];
        break;
      case 'yellow > orange > pink':
        bubble_colours_arr = [
          {
            position: a,
            colour: 'be2f92'
          },
          {
            position: b,
            colour: 'f88040'
          },
          {
            position: c,
            colour: 'fcf27d'
          }
        ];
        break;
      case 'yellow > blue > burgundy':
        bubble_colours_arr = [
          {
            position: a,
            colour: 'ca2340'
          },
          {
            position: b,
            colour: '0067a0'
          },
          {
            position: c,
            colour: 'ffdf81'
          }
        ];
    }
  }
  bubble_linear_gradient = context.createLinearGradient(0, stage_size[1], 0, 0);
  for (a = 0; (b = bubble_colours_arr[a]); a++)
    (percentage_position = b.position / scale_obj._maximum),
      bubble_linear_gradient.addColorStop(percentage_position, '#' + b.colour),
      (b.text_colour = checkTextColourForHexValue(b.colour));
}
function checkTextColourForHexValue(a) {
  console.log('checkTextColourForHexValue', a);
  function b(a) {
    return '#' == a.charAt(0) ? a.substring(1, 7) : a;
  }
  a = [
    parseInt(b(a).substring(0, 2), 16),
    parseInt(b(a).substring(2, 4), 16),
    parseInt(b(a).substring(4, 6), 16)
  ];
  return (text_colour = 100 > (a[0] + a[1] + a[2]) / 3 ? 'white' : 'black');
}
function addUnparsedItemToArray(a, b) {
  if (-1 == b.indexOf(',')) addParsedItemToArray(a, b);
  else
    for (var c = b.split(','), d = 0; d < c.length; d++)
      addParsedItemToArray(a, c[d]);
}
function addParsedItemToArray(a, b) {
  if ('' != b) {
    b = trimTrailingSpaces(b);
    for (var c = !1, d = 0; d < a.length; d++)
      if (a[d].id == b) {
        c = !0;
        break;
      }
    !1 == c &&
      ((c =
        a.length < type_colours_arr.length
          ? type_colours_arr[a.length]
          : getRandomGrey()),
      a.length > type_colours_arr.length && dbg(c),
      a.push({
        id: b,
        checked: !1,
        bubble_colour: c
      }));
  }
}
function getRandomGrey() {
  var a = parseInt(230 - 100 * Math.random());
  return colorToHex(a, a, a);
}
function colorToHex(a, b, c) {
  return this.byte2Hex(a) + this.byte2Hex(b) + this.byte2Hex(c);
}
function byte2Hex(a) {
  return (
    String('0123456789ABCDEF'.substr((a >> 4) & 15, 1)) +
    '0123456789ABCDEF'.substr(a & 15, 1)
  );
}
function buildFilterPanel() {
  filter_categories_arr = sortArrayBy(filter_categories_arr, 'id', 'string');
  filter_types_arr = sortArrayBy(filter_types_arr, 'id', 'string');
  if (user_defined_palette)
    for (var a, b = 0; b < user_defined_palette.length; b++) {
      a = user_defined_palette[b];
      for (var c = 0; c < filter_types_arr.length; c++)
        filter_types_arr[c].id == a.id &&
          (filter_types_arr[c].bubble_colour = a.bubble_colour);
    }
  filter_categories_arr.unshift({
    id: 'all',
    checked: !0
  });
  filter_types_arr.unshift({
    id: 'all',
    checked: !0
  });
  filter_categories_arr = moveOtherToEnd(filter_categories_arr);
  filter_types_arr = moveOtherToEnd(filter_types_arr);
  addFilterCheckBoxes('category', filter_categories_arr);
  addFilterCheckBoxes('type', filter_types_arr);
  addBubbleColourButtons();
  addFilterRadioButtons();
  addShowFilterButton();
  addOrderBubblesButton();
  $("input[type='checkbox']").click(onFilterCheckboxInteraction);
  650 < stage_size[0] &&
    'is_mobile' != device_type &&
    ($('#category-filters-container').css('float', 'left'),
    $('#type-filters-container').css('float', 'left'));
  a = $('#viz-filter-panel');
  a.css('display', 'block');
  b = parseInt(stage_size[0]) - a.width();
  b -= dimensions_obj.desktop[0] < $(window).width() - 1 ? 20 : 22;
  a.css('margin-left', b);
  a = $('#header-filter-ui');
  dbg('HEADER HEIGHT : ' + a.width());
  stage_size[0] - 220 < a.width()
    ? a.width(stage_size[0])
    : a.width(stage_size[0] - 220);
  onFilterCheckboxInteraction();
}
function moveOtherToEnd(a) {
  for (var b = -1, c, d = 0; d < a.length; d++)
    if (((c = a[d]), 'other' == c.id || 'Other' == c.id)) {
      b = d;
      break;
    }
  -1 != b && ((b = a.splice(b, 1)[0]), a.push(b));
  return a;
}
function addFilterCheckBoxes(a, b) {
  for (var c = '', d, e, f, g, h = 0; h < b.length; h++)
    (d = b[h].id),
      (e = a + '_' + h),
      (f = b[h].checked ? ' checked="true"' : ''),
      (g = '<div class="checkbox-graphic" id="' + e + '-graphic"></div>'),
      (c +=
        '<label class="filter-checkbox-label" for="' +
        e +
        '">' +
        g +
        '<input type="checkbox" name="' +
        h +
        '" id="' +
        e +
        '" value = ' +
        d +
        f +
        ' group="' +
        a +
        '"/>' +
        d +
        '</label>');
  $('#' + a + '-filters').html(c);
  checkFakeCheckbox(a, 0, 'on');
}
function addBubbleColourButtons() {
  for (var a, b, c = 0; c < bubble_colours_params_arr.length; c++)
    (a = bubble_colours_params_arr[c].id),
      (b = a + '-colour-button'),
      (a = $('#' + b)),
      a.hover(onColourButtonOver, onColourButtonOut),
      a.click(onColourButtonClick),
      (bubble_colours_params_arr[c].button_id_str = b),
      setHeaderButtonState(a, bubble_colours_params_arr[c].checked),
      $('#' + b + ' p').text(bubble_colours_params_arr[c].label),
      a.css('display', 'table');
}
function onColourButtonOver() {
  for (var a, b = 0; b < bubble_colours_params_arr.length; b++)
    (a = bubble_colours_params_arr[b]),
      a.button_id_str == this.id && setHeaderButtonState(this, !a.checked);
}
function onColourButtonOut() {
  for (var a, b = 0; b < bubble_colours_params_arr.length; b++)
    (a = bubble_colours_params_arr[b]),
      a.button_id_str == this.id && setHeaderButtonState(this, a.checked);
}
function onColourButtonClick() {
  for (var a, b = 0; b < bubble_colours_params_arr.length; b++)
    if (((a = bubble_colours_params_arr[b]), a.button_id_str == this.id)) {
      a.checked = !0;
      setHeaderButtonState(this, a.checked);
      colour_bubbles_by = a.id;
      PJS_instance.setBubbleColourStyle();
      showHighlightKey();
      var c;
      switch (a.id) {
        case 'type':
          c = 'Type';
          break;
        case 'value':
          c = 'Value';
      }
      _gaq.push(['_trackEvent', 'FilterInteraction', 'ColourBy', c]);
      dbg('tracking event: FilterInteraction / ColourBy : ' + c);
    } else
      (a.checked = !1),
        setHeaderButtonState($('#' + a.button_id_str), a.checked);
  onFilterCheckboxInteraction();
  showFilter();
}
function showHighlightKey() {
  var a;
  a =
    'always' == functionality_obj.onetowatch
      ? 'block'
      : 'primary_value_only' == functionality_obj.onetowatch &&
        'value' == colour_bubbles_by
        ? 'block'
        : 'type_only' == functionality_obj.onetowatch &&
          'type' == colour_bubbles_by
          ? 'block'
          : 'none';
  $('#viz-key').css('display', a);
}
function addFilterRadioButtons() {
  var a, b;
  display = 'table';
  $('#bubble-size-label').css('display', display);
  for (var c = 0; c < bubble_size_params_arr.length; c++)
    (a = bubble_size_params_arr[c].id),
      (b = a + '-filter-button'),
      (a = $('#' + b)),
      a.hover(onFilterButtonOver, onFilterButtonOut),
      a.click(onFilterButtonClick),
      (bubble_size_params_arr[c].button_id_str = b),
      setHeaderButtonState(a, bubble_size_params_arr[c].checked),
      a.css('display', display);
}
function onFilterButtonOver() {
  for (var a, b = 0; b < bubble_size_params_arr.length; b++)
    (a = bubble_size_params_arr[b]),
      a.button_id_str == this.id && setHeaderButtonState(this, !a.checked);
}
function onFilterButtonOut() {
  for (var a, b = 0; b < bubble_size_params_arr.length; b++)
    (a = bubble_size_params_arr[b]),
      a.button_id_str == this.id && setHeaderButtonState(this, a.checked);
}
function onFilterButtonClick() {
  for (var a, b = 0; b < bubble_size_params_arr.length; b++)
    if (((a = bubble_size_params_arr[b]), a.button_id_str == this.id)) {
      a.checked = !0;
      setHeaderButtonState(this, a.checked);
      PJS_instance.chooseBubbleSizeParam(a.id);
      var c;
      switch (a.id) {
        case 'popularity':
          c = 'Popularity';
          break;
        case 'numberofstudies':
          c = 'Studies';
          break;
        case 'numberofcitations':
          c = 'Citations';
      }
      _gaq.push(['_trackEvent', 'FilterInteraction', 'BubbleSize', c]);
      dbg('tracking event: FilterInteraction / BubbleSize : ' + c);
    } else
      (a.checked = !1),
        setHeaderButtonState($('#' + a.button_id_str), a.checked);
}
function addShowFilterButton() {
  show_filter_button = {
    checked: !0
  };
  var a = $('#filter-show-button');
  a.hover(onShowFilterButtonOver, onShowFilterButtonOut);
  a.click(onShowFilterButtonClick);
  setHeaderButtonState(a, show_filter_button.checked);
}
function onShowFilterButtonOver() {
  setHeaderButtonState(this, !show_filter_button.checked);
}
function onShowFilterButtonOut() {
  setHeaderButtonState(this, show_filter_button.checked);
}
function onShowFilterButtonClick() {
  show_filter_button.checked = !show_filter_button.checked;
  var a = $('#viz-filter-panel');
  setHeaderButtonState(this, show_filter_button.checked);
  !0 == show_filter_button.checked
    ? ($('#filter-show-button-label').html(
        '<img src="i/balloon_race_icon_filter_8px.png"/>HIDE FILTER'
      ),
      a.css('display', 'block'))
    : ($('#filter-show-button-label').html(
        '<img src="i/balloon_race_icon_filter_8px.png"/>SHOW FILTER'
      ),
      a.css('display', 'none'));
}
function setHeaderButtonState(a, b) {
  b
    ? ($(a).css('background-color', 'grey'), $(a).css('color', 'white'))
    : ($(a).css('background-color', 'white'), $(a).css('color', 'black'));
}
function showFilter() {
  dbg('showing filter : ');
  show_filter_button.checked = !1;
  onShowFilterButtonClick();
}
function addOrderBubblesButton() {
  for (var a, b, c = 0; c < reordering_params_arr.length; c++)
    (a = reordering_params_arr[c].id),
      (b = a + '-ordering-button'),
      (a = $('#' + b)),
      dbg(a),
      a.hover(onOrderingButtonOver, onOrderingButtonOut),
      a.click(onOrderinguttonClick),
      (reordering_params_arr[c].button_id_str = b),
      setHeaderButtonState(a, reordering_params_arr[c].checked),
      a.css('display', 'table');
}
function onOrderingButtonOver() {
  for (var a, b = 0; b < reordering_params_arr.length; b++)
    (a = reordering_params_arr[b]),
      a.button_id_str == this.id && setHeaderButtonState(this, !a.checked);
}
function onOrderingButtonOut() {
  for (var a, b = 0; b < reordering_params_arr.length; b++)
    (a = reordering_params_arr[b]),
      a.button_id_str == this.id && setHeaderButtonState(this, a.checked);
}
function onOrderinguttonClick() {
  for (var a, b = 0; b < reordering_params_arr.length; b++)
    if (((a = reordering_params_arr[b]), a.button_id_str == this.id)) {
      a.checked = !0;
      setHeaderButtonState(this, a.checked);
      datapoints_arr = sortArrayBy(
        datapoints_arr,
        '_' + a.id,
        a.type,
        a.direction,
        !0
      );
      PJS_instance.chooseBubbleSizeParam();
      var c;
      switch (a.id) {
        case 'popularity':
          c = 'Popularity';
          break;
        case 'numberofstudies':
          c = 'Studies';
          break;
        case 'numberofcitations':
          c = 'Citations';
      }
      _gaq.push(['_trackEvent', 'FilterInteraction', 'OrderBubblesBy', c]);
      dbg('tracking event: FilterInteraction / OrderBubblesBy : ' + c);
    } else
      (a.checked = !1),
        setHeaderButtonState($('#' + a.button_id_str), a.checked);
}
function onFilterCheckboxInteraction(a) {
  setCorrectFilterCheckboxes('category', filter_categories_arr);
  setCorrectFilterCheckboxes('type', filter_types_arr);
  checkActiveFiltersAgainstDataPoints();
  a &&
    ((a = filter_categories_arr[a.currentTarget.name].id),
    _gaq.push(['_trackEvent', 'FilterInteraction', 'FilterBy', a]),
    dbg('tracking event: FilterInteraction / FilterBy : ' + a));
}
function setCorrectFilterCheckboxes(a, b) {
  for (
    var c = $('form#' + a + '-filters input'),
      d = c[0].checked && !b[0].checked ? !0 : !1,
      e = !1,
      f = 1;
    f < c.length;
    f++
  )
    if (d) c[f].checked = !1;
    else if (c[f].checked) {
      e = !0;
      break;
    }
  c[0].checked = !1 == e || d ? !0 : !1;
  getFilterCheckboxSettings(a, b);
}
function checkFakeCheckbox(a, b, c) {
  var d, e;
  'value' == colour_bubbles_by || 'category' == a
    ? (d = {
        'background-image': 'url( i/br_tick_' + c + '.png )',
        'background-color': 'inherit',
        border: 'none'
      })
    : ((e = filter_types_arr[b].bubble_colour
        ? filter_types_arr[b].bubble_colour
        : '808080'),
      (d = {
        'background-image': 'none',
        border: '2px solid #' + e
      }),
      (d['background-color'] =
        (filter_types_arr[0].checked && 'type' == colour_bubbles_by) ||
        'on' == c
          ? '#' + e
          : 'inherit'));
  $('#' + a + '_' + b + '-graphic').css(d);
}
function getFilterCheckboxSettings(a, b) {
  for (var c = $('form#' + a + '-filters input'), d = 0; d < c.length; d++)
    (b[d].checked = c[d].checked),
      checkFakeCheckbox(a, d, c[d].checked ? 'on' : 'off');
}
function checkActiveFiltersAgainstDataPoints() {
  for (var a, b, c, d = 0; d < datapoints_arr.length; d++)
    (a = datapoints_arr[d]),
      (b = checkActiveFilterType(filter_categories_arr, a._categories_arr)) &&
        (c = checkActiveFilterType(filter_types_arr, a._types_arr)),
      b && c ? a.setActive(!0) : a.setActive(!1);
}
function checkActiveFilterType(a, b) {
  if (a[0].checked) return !0;
  for (var c = 0, d; (d = a[c]); c++)
    if (d.checked && -1 != b.indexOf(d.id)) return !0;
  return !1;
}
function sortArrayBy(a, b, c, d, e) {
  function f(a, c) {
    return a[b] > c[b] ? -1 : a[b] < c[b] ? 1 : 0;
  }
  function g(a, c) {
    return a[b] < c[b] ? -1 : a[b] > c[b] ? 1 : 0;
  }
  function h(a, c) {
    return parseFloat(a[b]) > parseFloat(c[b])
      ? -1
      : parseFloat(a[b]) < parseFloat(c[b]) ? 1 : 0;
  }
  function k(a, c) {
    return parseFloat(a[b]) < parseFloat(c[b])
      ? -1
      : parseFloat(a[b]) > parseFloat(c[b]) ? 1 : 0;
  }
  a =
    'string' == c
      ? 'descending' == d ? a.sort(f) : a.sort(g)
      : 'descending' == d ? a.sort(h) : a.sort(k);
  if (e) for (c = 0; c < a.length; c++) a[c]._id = c;
  return a;
}
function compareID(a, b) {
  return a.id < b.id ? -1 : a.id > b.id ? 1 : 0;
}
function compareName(a, b) {
  return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;
}
function getMyVarByName(a, b) {
  return a[b];
}
function splitStringToArrayAndTrimSpaces(a) {
  if (-1 != a.indexOf(',')) {
    a = a.split(',');
    for (var b, c = 0; c < a.length; c++)
      (b = a[c]), -1 != b.indexOf(' ') && (a[c] = trimTrailingSpaces(b));
  } else a = [a];
  return a;
}
function trimTrailingSpaces(a) {
  for (a = a.split(''); ' ' == a[0]; ) a = a.splice(1, a.length - 1);
  for (; ' ' == a[a.length - 1]; ) a = a.splice(0, a.length - 1);
  return (a = a.join(''));
}
function getParameterByName(a) {
  a = a.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
  a = RegExp('[\\?&]' + a + '=([^&#]*)').exec(window.location.search);
  return null == a ? '' : decodeURIComponent(a[1].replace(/\+/g, ' '));
}
function Scale(a, b) {
  function c() {
    d = document.createElement('canvas');
    d.width = 150;
    d.height = stage_size[1];
    axis_context = d.getContext('2d');
    drawDottedLine(10, 0, 10, stage_size[1], '#CCC', axis_context);
  }
  var d;
  this.draw = function() {
    context.drawImage(d, 0, 0);
  };
  this.doInitialDraw = c;
  this._minimum = a;
  this._maximum = b;
  c();
}
function ScaleLabel(a, b) {
  function c() {
    drawCanvasRoundedRectangle(0, y - 13, text_width + 20, 26, 7, axis_context);
    axis_context.fillStyle = 'black';
    axis_context.textAlign = 'left';
    axis_context.textBaseline = 'middle';
    axis_context.font = scale_font_size + 'px ' + font_name + ", 'Dosis'";
    axis_context.fillText(b, 10, y);
  }
  this._position;
  this._label;
  this.x;
  this.y;
  this.text_width;
  this.getPosition = function() {
    context.font = scale_font_size + 'px ' + font_name + ", 'Dosis'";
    text_width = context.measureText(b).width;
    x = 0;
    y =
      stage_size[1] -
      vertical_buffer_amount -
      (a - scale_obj._minimum) /
        (scale_obj._maximum - scale_obj._minimum) *
        (stage_size[1] - 2 * vertical_buffer_amount);
    c();
  };
  this.drawInitialImage = c;
  this._position = a;
  this._label = b;
}
function drawScaleLabels() {
  for (var a = 0; a < scaleLabels_arr.length; a++)
    scaleLabels_arr[a].getPosition();
}
function drawDottedLine(a, b, c, d, e, f) {
  var g = 0,
    h = 0;
  a == c ? ((c = d - b), (h = 4)) : ((c -= a), (g = 4));
  c = parseInt(c / 4);
  for (d = 0; d < c; d++)
    (a += g), (b += h), drawDottedLineElement(a, b, 1, e, f);
}
function drawDottedLineElement(a, b, c, d, e) {
  e = null == e ? context : e;
  e.beginPath();
  e.arc(a, b, Math.max(0, c), 0, 2 * Math.PI, !0);
  e.closePath();
  e.fillStyle = d;
  e.fill();
}
function drawCanvasRoundedRectangle(a, b, c, d, e, f) {
  f = null == f ? context : f;
  f.strokeStyle = 'grey';
  f.lineWidth = 1;
  f.fillStyle = 'white';
  f.beginPath();
  f.moveTo(a, b + e);
  f.arc(a + e, b + e, e, Math.PI, 1.5 * Math.PI, !1);
  f.lineTo(a + c - e, b);
  f.arc(a + c - e, b + e, e, 1.5 * Math.PI, 0, !1);
  f.lineTo(a + c, b + d - e);
  f.arc(a + c - e, b + d - e, e, 0, 0.5 * Math.PI, !1);
  f.lineTo(a + e, b + d);
  f.arc(a + e, b + d - e, e, 0.5 * Math.PI, Math.PI, !1);
  f.lineTo(a, b + e);
  f.closePath();
  f.fill();
  f.stroke();
}
function setMouseInteractions() {
  var a = $('#mousetrap'),
    b = $('#pjs-canvas-container').offset();
  a.offset({
    top: b.top,
    left: b.left
  });
  mousetrap_obj.offset = [a.offset().left, a.offset().top];
  a.mousemove(checkMousePosition);
  a.mousedown(onMouseDown);
}
function onMouseMove(a) {
  checkMousePosition();
}
function checkMousePosition(a) {
  var b = a.pageX - mousetrap_obj.offset[0];
  a = a.pageY - mousetrap_obj.offset[1];
  for (var c, d, e, f, g = datapoints_arr.length - 1; 0 <= g; g--)
    (c = datapoints_arr[g]),
      (e = c.x),
      (f = c.y),
      (d = c.current_radius),
      (e -= b),
      (f -= a),
      Math.sqrt(e * e + f * f) < d
        ? active_data_point ||
          ((active_data_point = c),
          c.mouseOver(),
          datapoints_arr.splice(datapoints_arr.indexOf(c), 1),
          datapoints_arr.push(c))
        : (active_data_point == c &&
            ((active_data_point = null),
            (datapoints_arr = sortArrayBy(
              datapoints_arr,
              '_' + bubble_size_param_name,
              'number',
              'descending',
              !1
            ))),
          c.mouseOut());
}
function onMouseDown(a) {
  var b = a.pageX - mousetrap_obj.offset[0];
  a = a.pageY - mousetrap_obj.offset[1];
  for (var c, d, e, f, g = 0; g < datapoints_arr.length; g++)
    (c = datapoints_arr[g]),
      (e = c.x),
      (f = c.y),
      (d = c.current_radius),
      (e -= b),
      (f -= a),
      Math.sqrt(e * e + f * f) < d && PJS_instance.bubbleMouseDown(c, b, a);
}
